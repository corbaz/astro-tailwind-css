---
// Asegurar que esta página se renderice en el servidor
export const prerender = false;

import { readFile, writeFile } from "node:fs/promises";
import path from "node:path";
import fs from "node:fs";

// Interfaces para el tipado estricto
interface User {
    id: number;
    nombre: string;
    edad: number | string;
    email: string;
    sexo: string;
}

interface Database {
    users: User[];
}

// Usar una ruta absoluta segura
const dbPath = path.join(process.cwd(), "src", "databases", "db.json");

// Asegurarnos que el directorio existe
const dbDir = path.dirname(dbPath);
if (!fs.existsSync(dbDir)) {
    fs.mkdirSync(dbDir, { recursive: true });
}

// Asegurarnos que el archivo de base de datos existe
if (!fs.existsSync(dbPath)) {
    fs.writeFileSync(dbPath, JSON.stringify({ users: [] }, null, 2));
}

// Funciones para manejar la base de datos
async function readDatabase(): Promise<Database> {
    try {
        const data = await readFile(dbPath, "utf-8");
        return JSON.parse(data) as Database;
    } catch (error) {
        console.error("Error al leer la base de datos:", error);
        // En caso de error, devolver una base de datos vacía
        return { users: [] };
    }
}

async function writeDatabase(db: Database): Promise<void> {
    await writeFile(dbPath, JSON.stringify(db, null, 2));
}

// Manejar los métodos HTTP
if (Astro.request.method === "GET") {
    try {
        const database = await readDatabase();
        return new Response(JSON.stringify(database.users), {
            status: 200,
            headers: {
                "Content-Type": "application/json",
            },
        });
    } catch (error) {
        console.error("Error obteniendo usuarios:", error);
        return new Response(
            JSON.stringify({ error: "Error al obtener usuarios" }),
            {
                status: 500,
                headers: {
                    "Content-Type": "application/json",
                },
            }
        );
    }
} else if (Astro.request.method === "POST") {
    try {
        // Verificar primero que hay contenido en el cuerpo de la petición
        const contentType = Astro.request.headers.get("Content-Type");
        if (!contentType || !contentType.includes("application/json")) {
            return new Response(
                JSON.stringify({ error: "El contenido debe ser JSON" }),
                {
                    status: 400,
                    headers: { "Content-Type": "application/json" },
                }
            );
        }

        // Obtener el texto antes de intentar parsearlo
        const text = await Astro.request.text();

        if (!text || text.trim() === "") {
            return new Response(
                JSON.stringify({
                    error: "El cuerpo de la petición está vacío",
                }),
                {
                    status: 400,
                    headers: { "Content-Type": "application/json" },
                }
            );
        }

        // Parsear el JSON con manejo de errores
        let body;
        try {
            body = JSON.parse(text);
        } catch (e) {
            return new Response(
                JSON.stringify({ error: "JSON inválido", details: e.message }),
                {
                    status: 400,
                    headers: { "Content-Type": "application/json" },
                }
            );
        }

        // Validación básica
        if (!body.nombre) {
            return new Response(
                JSON.stringify({ error: "Nombre es requerido" }),
                {
                    status: 400,
                    headers: { "Content-Type": "application/json" },
                }
            );
        }

        const db = await readDatabase();
        const newUser: User = {
            id: Date.now(),
            nombre: body.nombre,
            edad: body.edad || 0,
            email: body.email || "",
            sexo: body.sexo || "",
        };

        db.users.push(newUser);
        await writeDatabase(db);

        return new Response(JSON.stringify(newUser), {
            status: 201,
            headers: { "Content-Type": "application/json" },
        });
    } catch (error) {
        console.error("Error creando usuario:", error);
        return new Response(
            JSON.stringify({
                error: "Error al crear usuario",
                details: error.message,
            }),
            {
                status: 500,
                headers: { "Content-Type": "application/json" },
            }
        );
    }
} else {
    // Manejar métodos no soportados
    return new Response(JSON.stringify({ error: "Método no soportado" }), {
        status: 405,
        headers: {
            "Content-Type": "application/json",
            Allow: "GET, POST",
        },
    });
}
---
