---
// Asegurar que esta página se renderice en el servidor
export const prerender = false;

import { readFile, writeFile } from "node:fs/promises";
import path from "node:path";

// Interfaces para el tipado
interface User {
    id: number;
    nombre: string;
    edad: number | string;
    email: string;
    sexo: string;
}

interface Database {
    users: User[];
}

// Obtener el id del parámetro de ruta
const { id } = Astro.params;
const numericId = id ? parseInt(id) : 0;

// Ruta a la base de datos
const dbPath = path.join(process.cwd(), "src", "databases", "db.json");

// Log para depuración
console.log(`API Request: ${Astro.request.method} to /api/users/${id}`);

// Funciones de ayuda
async function readDatabase(): Promise<Database> {
    try {
        const data = await readFile(dbPath, "utf-8");
        return JSON.parse(data) as Database;
    } catch (error) {
        console.error("Error al leer la base de datos:", error);
        return { users: [] };
    }
}

async function writeDatabase(db: Database): Promise<void> {
    try {
        await writeFile(dbPath, JSON.stringify(db, null, 2));
        console.log("Base de datos actualizada correctamente");
    } catch (error) {
        console.error("Error al escribir en la base de datos:", error);
        throw error;
    }
}

// Manejo de diferentes métodos HTTP
if (Astro.request.method === "GET") {
    try {
        const db = await readDatabase();
        const user = db.users.find((user) => user.id === numericId);

        console.log(`GET: Buscando usuario con ID ${numericId}`);

        if (!user) {
            console.log(`Usuario con ID ${numericId} no encontrado`);
            return new Response(
                JSON.stringify({ error: "Usuario no encontrado" }),
                {
                    status: 404,
                    headers: { "Content-Type": "application/json" },
                }
            );
        }

        console.log(`Usuario encontrado:`, user);
        return new Response(JSON.stringify(user), {
            status: 200,
            headers: { "Content-Type": "application/json" },
        });
    } catch (error) {
        console.error("Error al obtener el usuario:", error);
        return new Response(
            JSON.stringify({ error: "Error al obtener el usuario" }),
            {
                status: 500,
                headers: { "Content-Type": "application/json" },
            }
        );
    }
} else if (Astro.request.method === "DELETE") {
    try {
        console.log(`DELETE: Intentando eliminar usuario con ID ${numericId}`);
        const db = await readDatabase();
        const userIndex = db.users.findIndex((user) => user.id === numericId);

        if (userIndex === -1) {
            console.log(
                `Usuario con ID ${numericId} no encontrado para eliminar`
            );
            return new Response(
                JSON.stringify({ error: "Usuario no encontrado" }),
                {
                    status: 404,
                    headers: { "Content-Type": "application/json" },
                }
            );
        }

        // Guardar el usuario que se va a eliminar para devolverlo como respuesta
        const deletedUser = db.users[userIndex];

        // Eliminar el usuario
        db.users.splice(userIndex, 1);
        await writeDatabase(db);

        console.log(`Usuario con ID ${numericId} eliminado correctamente`);

        // Devolver el usuario eliminado en lugar de una respuesta vacía
        return new Response(JSON.stringify(deletedUser), {
            status: 200, // Cambiar a 200 para proporcionar datos del usuario eliminado
            headers: { "Content-Type": "application/json" },
        });
    } catch (error) {
        console.error("Error al eliminar el usuario:", error);
        return new Response(
            JSON.stringify({ error: "Error al eliminar el usuario" }),
            {
                status: 500,
                headers: { "Content-Type": "application/json" },
            }
        );
    }
} else if (Astro.request.method === "PUT") {
    try {
        console.log(`PUT: Intentando actualizar usuario con ID ${numericId}`);
        const body = await Astro.request.json();
        console.log(`Datos recibidos para actualización:`, body);

        const db = await readDatabase();
        const userIndex = db.users.findIndex((user) => user.id === numericId);

        if (userIndex === -1) {
            console.log(
                `Usuario con ID ${numericId} no encontrado para actualizar`
            );
            return new Response(
                JSON.stringify({ error: "Usuario no encontrado" }),
                {
                    status: 404,
                    headers: { "Content-Type": "application/json" },
                }
            );
        }

        // Actualizar usuario preservando su id
        db.users[userIndex] = {
            ...db.users[userIndex],
            ...body,
            id: db.users[userIndex].id,
        };

        await writeDatabase(db);

        console.log(
            `Usuario con ID ${numericId} actualizado correctamente:`,
            db.users[userIndex]
        );

        return new Response(JSON.stringify(db.users[userIndex]), {
            status: 200,
            headers: { "Content-Type": "application/json" },
        });
    } catch (error) {
        console.error("Error al actualizar el usuario:", error);
        return new Response(
            JSON.stringify({
                error: "Error al actualizar el usuario",
                details: String(error),
            }),
            {
                status: 500,
                headers: { "Content-Type": "application/json" },
            }
        );
    }
} else {
    // Manejar métodos HTTP no soportados
    console.log(`Método ${Astro.request.method} no soportado`);
    return new Response(JSON.stringify({ error: "Método no soportado" }), {
        status: 405,
        headers: {
            "Content-Type": "application/json",
            Allow: "GET, PUT, DELETE",
        },
    });
}
---
